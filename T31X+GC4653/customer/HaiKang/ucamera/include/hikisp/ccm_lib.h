/**************************************************************************************************
*
* 版权信息: Copyright (c) 2013, 杭州海康威视数字技术股份有限公司
* 文件名称：ccm_lib.h
* 文件标识：CCM_LIB_H
* 摘    要：海康威视
* 作    者: 范蒙  
* 日    期: 2014年3月19日
* 备    注: 色彩校正算法静态库
*
* 当前版本: 2.0.2
* 版本说明: (2.0.0)初始版本
*         (2.0.1)修改全抑制色彩矩阵为对角阵
*         (2.5.1)修改宏定义，避免与外部重复定义
*         (2.5.2)支持64位平台，统一库返回值成功为0，失败为-1
*         (2.5.5)修复随增益/亮度衰减模块bug，调整代码结构
*         (2.5.6)退回随增益/亮度衰减模块至2.5.2版本，保持与老版本一致；
*                新增CCM_KEY_YRA_RATIO_GAIN_MIN/MAX、CCM_KEY_YRA_DEC_RATIO_GAIN_LOW键值获取接口
**************************************************************************************************
*/

/*************************************************************************************************
*                          CCM LIB 使用说明 
*
*    1) 初始化阶段的调用顺序:
*        (1) 获取库内部所需的内存大小:				CCM_GetMemSize(), 获取内存大小后, 分配相应内存
*        (2) 创建句柄实例:							CCM_Create()
*        (3) 根据需求设置key param对应的值（必需）:	CCM_SetKeyParam()
*		 (4) 算法库主流程函数:						CCM_Process()
*    	
*    2) 在启用后, 如果要重传配置参数, 调用顺序如下:
*        (1) 根据需求设置key param对应的值: CCM_SetKeyParam() 
*
*    3) 获取版本号和版本时间: CCM_GetVersion()
*
*    4) 获取状态信息(包括等): CCM_GetStateParam()
*
*************************************************************************************************/ 

#ifndef _CCM_LIB_H_
#define _CCM_LIB_H_


#ifdef __cplusplus
extern "C" {
#endif
	
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <time.h> 

#include "mem_tab.h"
    
	
/*******************************************************************************************************************************
* 文件版本和时间宏声明
*******************************************************************************************************************************/
/* 当前版本号*/
#define HIK_CCM_MAJOR_VERSION      2  /* 主版本号，接口改动、功能增加、架构变更时递增，最大63 */
#define HIK_CCM_SUB_VERSION        5  /* 子版本号，性能优化、局部结构调整、模块内集成其他库的主版本提升时递增，最大31 */
#define HIK_CCM_REVISION_VERSION   6  /* 修正版本号，修正bug后递增，最大31 */
	
/* 版本日期*/
#define HIK_CCM_VER_YEAR           18           /* 年*/
#define HIK_CCM_VER_MONTH          2			/* 月*/
#define HIK_CCM_VER_DAY            26			/* 日*/
	
	
/*******************************************************************************************************************************
* 宏定义
*******************************************************************************************************************************/
#ifndef _HRESULT_DEFINED
#define _HRESULT_DEFINED
typedef int HRESULT;
#endif  /* !_HRESULT_DEFINED */
	
/* 错误码定义 */
#define HIK_CCM_LIB_S_OK					0				//成功	    
#define HIK_CCM_LIB_S_FAIL					-1				//失败	        
#define HIK_CCM_LIB_E_PARA_NULL				0x80000000		//参数指针为空	    
#define HIK_CCM_LIB_E_MEM_NULL				0x80000001		//传入的内存为空   
#define HIK_CCM_LIB_E_MEM_OVER			    0x80000002		//内存溢出
#define HIK_CCM_LIB_E_PARAM_KEY				0x80000003		//错误的参数键值 
#define HIK_CCM_LIB_E_PARAM_VAL				0x80000004		//错误的参数值 

/* 所需内存 */
#define HIK_CCM_MTAB_NUM				    1		      

/* 配置数据所需内存大小（字节） */
#define HIK_CCM_CFG_DATA_LEN			    2048			// 单位为字节


/******************************************************************************
* 宏声明
******************************************************************************/
/* 防分母为零 */
#define DIV_SHOULD_NOT_ZERO			1 

/* 求最值 */
#define CCM_MAX_V(a, b)					((a) > (b) ? (a) : (b))  
#define CCM_MIN_V(a, b)					((a) < (b) ? (a) : (b)) 

/* 数值范围保护 */
#define CCM_CLIP(a, l, h)				(CCM_MIN_V(CCM_MAX_V(a, l), (h)))

/* 色彩校正矩阵数组长度 */
#define CCM_MAT_LEN					9

/* 色彩抑制权重查找表长度 */
#define CCM_WT_TAB_LEN				256       

/* 色温范围 */
#define CCM_CT_MIN				    2800 
#define CCM_CT_MAX				    6500 

/* 平均亮度最大值 */
#define CCM_LUM_MAX				    255

/* 曝光增益最大值 */
#define CCM_GAIN_MAX				255


/*******************************************************************************************************************************
* 键值定义
*******************************************************************************************************************************/
/* CCM参数调试键值 */
typedef enum _CCM_PARAM_KEY
{
	// CCM
	CCM_KEY_CFG_DATA_ADDR    				= 0x00000010,   //(I) 配置数据首地址

	// CT
	CCM_KEY_CT_SWITCH                       = 0x00000011,   //(I) 色温联动开关，0、1，默认1

	// CNR
	CCM_KEY_CNR_LEVEL		    			= 0x00000012,   //(I) 色彩抑制强度，0~100，默认50

	// HUE
	CCM_KEY_HUE_LEVEL		    			= 0x00000013,   //(I) 色度（hue），0~100，默认50
	CCM_GET_LIB_INFO						= 0x00000014,
	CCM_KEY_YRA_RATIO_GAIN_MIN              =  0x00000015,     //增益衰减开始的增益数(0 - 100)
	CCM_KEY_YRA_RATIO_GAIN_MAX              =  0x00000016,     //增益衰减结束的增益数(0 - 100)
	CCM_KEY_YRA_DEC_RATIO_GAIN_LOW          =  0x00000017,     //增益衰减降的幅度(0 - 100)

	CCM_KEY_YRA_RATIO_LUM_MIN               =  0x00000018,     //亮度衰减开始的增益数(0 - 100)
	CCM_KEY_YRA_RATIO_LUM_MAX               =  0x00000019,     //亮度衰减结束的增益数(0 - 100)
	CCM_KEY_YRA_DEC_RATIO_LUM_LOW           =  0x00000020,     //亮度衰减降的幅度(0 - 100)

	/**********************  调试接口  ****************************************/
	CCM_DEBUG_PIN							= 0x80000000    //debug_pin;
		
} CCM_PARAM_KEY;

/******************************************************************************
* 结构体定义
******************************************************************************/

// 配置参数解析结构体
typedef struct  _CCM_CFG_DATA_PARAM
{
    S16		ccm_a[CCM_MAT_LEN];
    S16		ccm_tl84[CCM_MAT_LEN];
    S16		ccm_d50[CCM_MAT_LEN];
    S16    	ccm_d65[CCM_MAT_LEN];
	S16     ccm_cnr[CCM_MAT_LEN];
}CCM_CFG_DATA_PARAM;

	
/*******************************************************************************************************************************
* 结构体定义
*******************************************************************************************************************************/
/* CCM创建句柄相关参数 */
typedef struct _CCM_PARAM_STRU
{	
	void			*cfg_data_addr;				//(I) 配置数据首地址

	unsigned char	reserved[64];				// 保留字段
	
} CCM_PARAM;


/* CCM运行参数  */
typedef struct _CCM_PROCESS_PARAM_STRU
{	
    unsigned int	color_temp;					//(I) 当前色温
    unsigned int	gain_level;					//(I) 当前增益，0~100
    unsigned int	avg_lum;					//(I) 当前亮度，0~255

    signed short	cc_mat[9];					//(O) 输出色彩校正矩阵(CCM)
	
	unsigned char	reserved[66];				// 保留字段
	
} CCM_PROCESS_PARAM;






/*******************************************************************************************************************************
* 接口函数声明
*******************************************************************************************************************************/
/*******************************************************************************************************************************
* 功  能：获取所需内存大小
* 参  数：param      -I 参数结构指针
*         mem_tab    -O 内存申请表
* 返回值：返回状态码
*******************************************************************************************************************************/
HRESULT CCM_GetMemSize(CCM_PARAM *param, MEM_TAB mem_tab[HIK_CCM_MTAB_NUM]); 

/*******************************************************************************************************************************
* 功  能：创建CCM模块
* 参  数：param      -I 参数结构指针
*         mem_tab    -I 内存申请表
*         **handle   -O 返回CCM模块句柄
* 返回值：返回状态码
*******************************************************************************************************************************/
HRESULT CCM_Create(CCM_PARAM *param, MEM_TAB mem_tab[HIK_CCM_MTAB_NUM], void **handle); 

/*******************************************************************************************************************************
* 功  能：CCM主处理流程
* 参  数：handle  -IO   句柄(handle由CCM_Create返回)
*         param   -IO   处理参数结构体
* 返回值：返回状态码
*******************************************************************************************************************************/
HRESULT CCM_Process(void *handle, CCM_PROCESS_PARAM *param);

/*******************************************************************************************************************************
* 功  能：设置输出内部状态信息的回调函数指针
* 参  数：handle        -IO CCM模块句柄
*         chan_id       -I 设置通道号id
*         callback_parm -I 回调函数参数数据指针，实现在回调函数中调用库外部数据，如不需要可填NULL
*         callback_func -I 回调函数指针，形式为void (*debug_info_callback)(void *debug_info, U32 size, void *callback_param);
* 返回值：返回状态码
* 备  注：函数内部将callback_func设置为回调函数指针
*******************************************************************************************************************************/
HRESULT CCM_SetDebugInfoCallback(void *handle, unsigned short chan_id, void *callback_param, void *callback_func);

/*******************************************************************************************************************************
* 功  能：算法库参数调试接口，设置CCM的算法参数
* 参  数：handle      -IO 模块句柄
*         param_key   -I 参数键
*         param_val   -I 参数键值
* 返回值：返回状态码
*******************************************************************************************************************************/
HRESULT CCM_SetKeyParam(void *handle, CCM_PARAM_KEY param_key, signed long param_val);

/*******************************************************************************************************************************
* 功  能：算法库参数调试接口，获得CCM的算法参数
* 参  数：handle      -IO 模块句柄
*         param_key   -I 参数键
*         param_val   -O 参数键值
* 返回值：返回状态码
*******************************************************************************************************************************/
HRESULT CCM_GetKeyParam(void *handle, CCM_PARAM_KEY param_key, signed long *param_val);

/*******************************************************************************************************************************
* 功  能：获取当前编码版本信息
* 参  数：无
* 返回值：返回版本信息
* 备  注：版本信息格式为：版本号＋年（7位）＋月（4位）＋日（5位）
*          其中版本号为：主版本号（6位）＋子版本号（5位）＋修正版本号（5位）
*******************************************************************************************************************************/
unsigned int CCM_GetVersion();


#ifdef __cplusplus
}
#endif 


#endif /* _CCM_LIB_H_ */
